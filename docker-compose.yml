networks:
  project-network:
    driver: bridge

volumes:
  pg_data:
  backup_data:

services:

  postgres-nonna:
    container_name: postgres-nonna
    image: postgres:17.3-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    volumes:
      - pg_data:/var/lib/postgresql/data
      - backup_data:/tmp/backup
    networks:
      - project-network
    ports:
      - "5432:5432"

  nginx-app:
    image: nginx:alpine 
    container_name: webserver
    volumes:
      - ./backend-nonna:/var/www
      - ./.docker/docker/app.conf:/etc/nginx/conf.d/app.conf
    ports:
        - "80:80"
        - "82:82"
        - "83:83"
        - "84:84"
        - "85:85"
    networks:
      - project-network

  pgadmin-nonna:
    container_name: pgadmin-nonna 
    image: dpage/pgadmin4
    networks:
      - project-network
    environment:
        PGADMIN_DEFAULT_EMAIL: "algo@gmail.com"
        PGADMIN_DEFAULT_PASSWORD: root
        PGADMIN_LISTEN_PORT: "81"
    ports:
      - "81:81"
    volumes:
      - ./database/backup:/var/lib/pgadmin/storage
    mem_limit: 1000M
    cpus: '1.5'
    restart: unless-stopped
    depends_on:
      - postgres-nonna

  backend-nona:
    container_name: backend-nona
    build:
      context: ./
      dockerfile: ./docker/php.Dockerfile
      args:
        USER: ${USER}
        UID: ${UID:-1000}
    networks:
        - project-network
    volumes:
        - ./backend-nonna:/var/www
    extra_hosts:
        - "host.docker.internal:host-gateway"
    restart: unless-stopped

  frontend-nona:
    container_name: frontend-nona
    build:
      context: ./
      dockerfile: ./docker/nodeJs.DockerFile
      args:
        USER: ${USER}
        UID: ${UID:-1000}
    networks:
      - project-network
    ports:
      - "9000:9000"
      - "4040:4040"
    volumes:
      - ./frontend-nonna:/usr/src/app
      - /usr/src/app/node_modules
      - ./docs:/usr/share/docs
